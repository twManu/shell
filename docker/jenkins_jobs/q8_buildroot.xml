<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>build br1 or br (br is now edge since 2021.11.05)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>3</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>cleanBeforeBuild</name>
          <description>to clean workspace before build
1. &apos;clean&apos; will do checkout
2.  non-clean will just build</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>stage</name>
          <description>br1 or br
br1 has target br
br has target edge or q8</description>
          <defaultValue>br1</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>target</name>
          <description>build target has edge or q8
target=edge, stage=br to generate rootfs.tar(.xz) and bzImage
target=q8 stage=br1 to generate q8 stage1
target=q8 stage=br to generate diff.tgz</description>
          <defaultValue>edge</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>blank means master or
full branch name must be provided
 say, edge_v15 or q8_v12
</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.94">
    <script>pipeline {
    agent any
    environment {
        date = sh(returnStdout: true, script: &apos;date +%Y%m%d&apos;).trim()
        //keepDirPP/$date/edge
        //keepDirPP/$date/q8
        //keepDirPP/edge/$branch
        //keepDirPP/q8/$branch
        keepDirPP = &quot;${JENKINS_HOME}/userContent&quot;
        outTar = &quot;out/br/output/images/rootfs.tar&quot;
        edgeKern = &quot;out/br/output/images/bzImage&quot;
        outKern = &quot;tftp/kernel&quot;
        outDiff = &quot;tftp/diff.tgz&quot;
    }
    stages {
        stage(&apos;clean &amp; checkout&apos;) {
            when { expression { params.cleanBeforeBuild } }
            steps{
                script {
                    echo &quot;HOME=${HOME}&quot;
                    sh &apos;rm -rf *; git clone ssh://q8vista@192.168.1.160/home/q8vista/Q8_Vista/bare/buildroot&apos;
                    if ( params.branch!=&quot;&quot; ) {
                        sh &apos;cd buildroot; git checkout ${params.branch}&apos;
                    }
                }
            }
        } //cleean
        stage(&apos;build&apos;) {
            steps {
                script {
                    echo &quot;stage= ${params.stage}&quot;
                    env.ckPoint = sh (
                        script: &apos;cd buildroot; git log | head -n1 | cut -f2 -d \&apos; \&apos;&apos;,
                        returnStdout: true
                    ).trim()
                    //determine where to save artifact
                    if ( params.branch==&quot;&quot; ) {
                        env.keepDir = &quot;${keepDirPP}/${date}/${params.target}&quot;
                    } else {
                        env.keepDirP = &quot;${keepDirPP}/${params.target}&quot;
                        env.keepDir = sh(returnStdout: true, script: &apos;echo ${params.branch} | cut -f2 -d \&apos;_\&apos;&apos;).trim()
                        env.keepDir = &quot;${keepDirP}/${keepDir}&quot;
                    }
                    sh &apos;mkdir -p ${keepDir}&apos;
                    if ( params.stage==&quot;br&quot; ) {
                        dir(&quot;buildroot/br&quot;) {
                            sh &quot;make ${params.target}&quot;
                            if ( params.target==&quot;edge&quot; ) {
                                def exists = fileExists &quot;${outTar}&quot;
                                if (exists) {
                                    //symbolic link is hiden
                                    sh &quot;xz -zf ${outTar}; cp -a ${outTar}.xz ${keepDir}&quot;
                                }
                                def exists2 = fileExists &quot;${edgeKern}&quot;
                                if (exists2) {
                                    sh &quot;cp -a ${edgeKern} ${keepDir}&quot;
                                    sh &apos;echo &quot;${params.stage} ${ckPoint}&quot; &gt;&gt;${keepDir}/commit.txt&apos;
                                }
                            } else { //params.target==&quot;edge&quot;, i.e q8
                                def exists = fileExists &quot;${outDiff}&quot;
                                if (exists) {
                                    sh &quot;cp -a ${outDiff} ${keepDir}&quot;
                                    sh &apos;echo &quot;${params.stage} ${ckPoint}&quot; &gt;&gt;${keepDir}/commit.txt&apos;
                                }
                            } //params.target==&quot;edge&quot;
                            
                        } //buildroot/br
                    } else {
                        if ( params.stage==&quot;br1&quot; ) {
                            dir(&quot;buildroot/br1&quot;) {
                                sh &quot;make ${params.target}&quot;
                                def exists = fileExists &quot;${outKern}&quot;
                                if (exists) {
                                    sh &quot;cp -a ${outKern} ${keepDir}&quot;
                                    sh &apos;echo &quot;${params.stage} ${ckPoint}&quot; &gt;&gt;${keepDir}/commit.txt&apos;
                                }
                                def br1Files = [&apos;tftp/default&apos;, &apos;tftp/acpboot.bin&apos;, &apos;tftp/ldlinux.c32&apos;]
                                for (int i = 0; i &lt; br1Files.size(); ++i) {
                                    sh &quot;cp -a ${br1Files[i]} ${keepDir}&quot;
                                }
                            }
                        } else { error &quot;unknown stage ${params.stage}&quot; }
                    }
                }
            }
        } //build
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>