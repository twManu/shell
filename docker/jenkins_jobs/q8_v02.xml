<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>build whole q8 vxx</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>3</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>build_br1</name>
          <description>to build br1 or not, clean by default</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>build_br</name>
          <description>not clean, just build</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>build_client</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>build_server</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>build_webui</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>branch=xxx means q8_xxx
Ex. v01 =&gt; q8_v01</description>
          <defaultValue>v02</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>H(30-35) 20 * * *</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.94">
    <script>pipeline {
    agent any
    environment {
        date = sh(returnStdout: true, script: &apos;date +%Y%m%d&apos;).trim()
        usrCnt = &quot;${JENKINS_HOME}/userContent&quot;
        SERVER = &quot;jenkins@172.17.0.1&quot;
        R_HOME = &quot;/home/jenkins&quot;
        R_SYS_DIR = &quot;${R_HOME}/q8/system/sys&quot;
        commitDir= sh(
            returnStdout: true,
            script: &quot;if [ -z \&quot;${branch}\&quot; ]; then echo -n ${usrCnt}/${date}/q8; else echo -n ${usrCnt}/q8/${branch}; fi&quot;
        )
    }
    stages {
        stage(&apos;build client&apos;) {
            when{ expression {params.build_client} }
            steps {
                script {
                    def br = build(job: &quot;q8_client&quot;,
                        parameters:[
                            string(name: &apos;branch&apos;, value: &quot;${branch}&quot;)
                        ]
                    )
                }
            }
        } //build client
        stage(&apos;build br1&apos;) {
            when{ expression {params.build_br1} }
            steps {
                script {
                    def br = build(
                        job: &quot;q8_buildroot&quot;,
                        parameters:[
                            booleanParam(name:&apos;cleanBeforeBuild&apos;, value:true),
                            string(name: &apos;stage&apos;, value: &quot;br1&quot;), string(name: &apos;target&apos;, value: &quot;q8&quot;), string(name: &apos;branch&apos;, value: &quot;${branch}&quot;)
                        ]
                    )
                }
            }
        } //br1
        stage(&apos;build br&apos;) {  //edge move i915 driver to /root, do after edge
            when{ expression {params.build_br} }
            steps {
                script {
                    def br = build(
                        job: &quot;q8_buildroot&quot;,
                        parameters:[
                            booleanParam(name:&apos;cleanBeforeBuild&apos;, value:false),
                            string(name: &apos;stage&apos;, value: &quot;br&quot;), string(name: &apos;target&apos;, value: &quot;q8&quot;), string(name: &apos;branch&apos;, value: &quot;${branch}&quot;)
                        ]
                    )
                }
            }
        } //q8
        stage(&apos;build server&apos;) {
            when{ expression {params.build_server} }
            steps {
                script {
                    def br = build(job: &quot;q8_server&quot;,
                        parameters:[
                            string(name: &apos;branch&apos;, value: &quot;${branch}&quot;)
                        ]
                    )
                }
            }
        } //build server
        stage(&apos;build webui&apos;) {
            when{ expression {params.build_webui} }
            steps {
                script {
                    def br = build(job: &quot;q8_webui&quot;,
                        parameters:[
                            string(name: &apos;branch&apos;, value: &quot;${branch}&quot;)
                        ]
                    )
                }
            }
        } //build server
        stage(&apos;system checkout&apos;) {
            steps {
                script {
                    sh &quot;ssh ${SERVER} \&quot;rm -rf q8; mkdir q8; cd q8; git clone ssh://q8vista@192.168.1.160/home/q8vista/Q8_Vista/bare/system\&quot;&quot;
                    if ( params.branch==&quot;&quot; ) {
                        sh &quot;ssh ${SERVER} mkdir -p ${R_SYS_DIR}/package/${date}&quot;
                        sh &apos;scp -r ${commitDir}/* ${SERVER}:${R_SYS_DIR}/package/${date}&apos;
                    } else {
                        sh &quot;ssh ${SERVER} \&quot;cd ${R_SYS_DIR}; git checkout q8_${branch}; mkdir -p package/${branch}\&quot;&quot;
                        sh &apos;scp -r ${commitDir}/* ${SERVER}:${R_SYS_DIR}/package/${branch}&apos;
                    }
                    sh &apos;ssh ${SERVER} &quot;cd ${R_SYS_DIR}; VER=${branch} make build&quot;&apos;
                    env.ckPoint = sh (
                        script: &apos;ssh ${SERVER} &quot;cd ${R_SYS_DIR}; git log | head -n1 | cut -f2 -d \&apos; \&apos;&quot;&apos;,
                        returnStdout: true
                    ).trim()
                    sh &quot;echo system ${ckPoint} &gt;&gt;${commitDir}/commit.txt&quot;
                    sh &quot;scp ${SERVER}:${R_SYS_DIR}/out/fp/root.tar.xz ${commitDir}/root_sys.tar.xz&quot;
                    sh &apos;ssh ${SERVER} &quot;cd ${R_SYS_DIR}; VER=${branch} make q8vista&quot;&apos;
                    sh &apos;ssh ${SERVER} &quot;cd ${R_SYS_DIR}; VER=${branch} make installer&quot;&apos;
                    sh &apos;scp ${SERVER}:${R_SYS_DIR}/../Installer/Q8_Vista-*.exe ${commitDir}&apos;
                } //script
            } //steps
        } //stage
    } //stages
    post() {
        always {
            cleanWs()
        }
    }
} //pipeline</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>