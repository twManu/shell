# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
#
# put this file in $HOME and have xterm run following custom command
# /bin/bash -rcfile ~/.rc_c875

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export CVSROOT=:pserver:manuchen@10.1.9.200:/home/cvsroot
export EDITOR=vim
alias lnaver='sudo mount.cifs //avermedia.com/NETLOGON /mnt/aver -o uid=1000,username=avermedia\\\a000989'
alias lndriver='sudo mount.cifs //10.1.9.247/Driver /mnt/driver -o uid=1000,username=avermedia\\\a000989'
alias lngit='sudo mount.cifs //10.1.9.247/vl/GIT /mnt/git -o uid=1000,username=avermedia\\\a000989'
alias goshare='cd /media/sf_share'
alias gowork='cd $WK_DIR'
# for c875 
export C875_DIR=~/c875/fellini-master-public
export WK_DIR=$C875_DIR/fellinux
export CROSS_COMPILE=arm-none-linux-gnueabi-
export CC=${CROSS_COMPILE}gcc
export CPP=${CROSS_COMPILE}cpp
export CXX=${CROSS_COMPILE}g++
export LD=${CROSS_COMPILE}ld
export AR=${CROSS_COMPILE}ar
export AS=${CROSS_COMPILE}as
export NM=${CROSS_COMPILE}nm
export RANLIB=${CROSS_COMPILE}ranlib
export OBJCOPY=${CROSS_COMPILE}objcopy
export OBJDUMP=${CROSS_COMPILE}objdump
export STRIP=${CROSS_COMPILE}strip

export PATH=~/bin/arm-2008q3/bin:$PATH
export KSRC=${WK_DIR}/linux-2.6.35
export KOBJ=$KSRC

ORG_C_INC=`${CC} --print-file-name=include`
FIX_C_INC=`dirname ${ORG_C_INC}`
CFLAGS="-O2 -g -nostdinc -Os -funit-at-a-time -fmerge-all-constants -fno-tree-loop-optimize -fno-tree-dominator-opts -fno-strength-reduce -fstrict-aliasing -funsigned-char -std=gnu99 -mlittle-endian -mtune=arm9tdmi -march=armv5t -Wall -Wstrict-prototypes -fno-strict-aliasing -Wstrict-prototypes -fno-builtin -msoft-float -I${WK_DIR}/uClibc-0.9.32/uclibc-dev/include -I${KSRC}/include -I${KSRC}/arch/arm/include -I${KSRC}/arch/arm/mach-ql300/include -isystem ${FIX_C_INC}/include-fixed -isystem ${ORG_C_INC} -I${WK_DIR}/uClibc-0.9.32/include"
export CFLAGS

LDFLAGS="-Wl,-EL -Wl,-z,defs -Wl,-z,now -Wl,-s -B${WK_DIR}/uClibc-0.9.32/uclibc-dev/lib -Wl,-rpath,/lib -Wl,-rpath-link,/lib -Wl,--dynamic-linker,/lib/ld-uClibc.so.0 -static -pthread -L${WK_DIR}/uClibc-0.9.32/uclibc-dev/lib"
export LDFLAGS

#
# Read me of build
#
#----- prerequisites
# WK_DIR set to fellinux
# CC, CPP, CFLAGS, LDFLAGS set accordingly
# fuse enabled in kernel
# HAS_LOCALE and HAS_WCHAR = y in uClibc
#
#fuse-2.9.2
# 1. $ ./configure --host=x86_64-pc-linux --target=arm-linux --prefix=
# 2. $ make
# 3. $ make DESTDIR=${WK_DIR}/rootfs install
#
# ntfs-3g_ntfsprogs-2013.1.13
# 1. $ ./configure --target=arm-linux CC=arm-none-linux-gnueabi-gcc --host=x86_64 --prefix=
# 2. $ make
# 3. $ vi src/Makefile
#        install-exec-hook
#                $(LDCONFIG)
# --->
#        install-exec-hook
#                echo "please do LDCONFIG manually"
# 4. $ make DESTDIR=${WK_DIR}/rootfs install
#
#
#
